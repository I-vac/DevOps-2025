name: Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    manual: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push application image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit:latest

      - name: Build and push simulator API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/simulator-api:latest

      - name: Configure SSH for Deployment
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server and Trigger Vagrant Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "Pulling latest Docker images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/minitwit:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/simulator-api:latest

            echo "Stopping running containers..."
            docker-compose down

            echo "Starting new deployment..."
            docker-compose up -d

            echo "Triggering Vagrant to provision DigitalOcean VM..."
            cd ~/itu-minitwit  # Adjust path if needed
            vagrant up --provision
          EOF
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
