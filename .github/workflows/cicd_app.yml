name: CI/CD for Java Application

on:
  workflow_dispatch:
  push:
    branches:
      - feat/monitoring

jobs:
  # 1) Static analysis on Java
  lint-java:
    name: Java Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven deps
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Code‐formatter check (fmt-maven)
        run: mvn com.coveo:fmt-maven-plugin:2.16:check

      - name: Checkstyle
        run: mvn checkstyle:check

  # 2) Build & run unit tests in Java
  build-test:
    name: Build & Unit Test Java
    runs-on: ubuntu-latest
    needs: lint-java
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven deps
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build & run unit tests
        run: mvn clean verify

  # 3) Build & smoke-test your Docker images
  build-test-docker:
    name: Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker images
        run: docker compose build minitwit simulator-api

      - name: Start services
        run: docker compose up -d

      - name: Wait for `/health` to respond
        run: |
          timeout 60 bash -c "until curl -sf http://localhost:5000/health \
            | grep -q '\"status\":\"ok\"'; do
            echo 'waiting…'
            sleep 5
          done"

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install API test deps
        run: pip install requests

      - name: Run API tests
        run: python3 tests/api_tests.py

      - name: Tear down
        run: docker compose down --volumes

  # 4) Lint your Dockerfiles
  lint-docker:
    name: Hadolint Dockerfiles
    runs-on: ubuntu-latest
    needs: lint-java
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfile (app)
        run: docker run --rm -i hadolint/hadolint:latest < Dockerfile
      - name: Lint Dockerfile.api (simulator)
        run: docker run --rm -i hadolint/hadolint:latest < Dockerfile.api

  # 5) Lint shell scripts
  lint-shell:
    name: ShellCheck Scripts
    runs-on: ubuntu-latest
    needs: lint-java
    steps:
      - uses: actions/checkout@v3
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Lint all *.sh
        run: find . -name '*.sh' | xargs shellcheck --severity=error

  # 6) Full end-to-end with both compose files (app + monitoring)
  build-and-test:
    name: Full Docker-Compose Integration Tests
    runs-on: ubuntu-latest
    needs: [build-test-docker, lint-docker, lint-shell]
    steps:
      - uses: actions/checkout@v3

      - name: Build all services
        run: |
          docker compose \
            -f docker-compose.yml \
            -f monitoring/docker-compose.yml \
            build

      - name: Start everything
        run: |
          docker compose \
            -f docker-compose.yml \
            -f monitoring/docker-compose.yml \
            up -d

      - name: Wait for `/health`
        run: |
          timeout 60 bash -c "until curl -sf http://localhost:5000/health \
            | grep -q '\"status\":\"ok\"'; do
            echo 'waiting…'
            sleep 5
          done"

      - name: Run API tests
        run: |
          pip install requests
          python3 tests/api_tests.py

      - name: Tear down
        run: |
          docker compose \
            -f docker-compose.yml \
            -f monitoring/docker-compose.yml \
            down --volumes

  # 7) Deploy if everything above succeeded
  deploy:
    name: Deploy to Droplet
    runs-on: ubuntu-latest
    needs: [lint-java, build-test, lint-docker, lint-shell, build-test-docker, build-and-test]
    steps:
      - uses: actions/checkout@v3

      - name: SSH & Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_APP_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key:      ${{ secrets.DROPLET_SSH_KEY_PRIVATE }}
          script: |
            set -e
            cd ~/DevOps-2025
            git pull
            docker compose down
            docker compose up -d --build
