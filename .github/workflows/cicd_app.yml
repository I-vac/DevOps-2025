name: CI/CD for Java Application

on:
  workflow_dispatch:
  push:
    branches:
      - feat/monitoring

jobs:
  lint-java:
    name: Lint & Format-check Java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven deps
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Run code formatter check
        run: mvn fmt:check

      - name: Run Checkstyle
        run: mvn checkstyle:check

  build-java:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint-java
    if: needs.lint-java.result == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
      - name: Cache Maven deps
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Build & run unit tests
        run: mvn clean verify

      # your Docker-based integration tests here…
      - name: Build Docker images
        run: docker compose build minitwit simulator-api
      - name: Run application
        run: docker compose up -d
      - name: Wait for health
        run: |
          timeout 60 bash -c '
            until curl -sf http://localhost:5000/health | grep -q '"'"'"status":"ok"'"'"'" ; do
              echo "waiting…" ; sleep 5
            done'
      - name: Run API tests
        run: pip install requests && python3 tests/api_tests.py
      - name: Tear down
        run: docker compose down

  # ──────────────────────────────────────────────────────────────────────────────
  # 3. Lint Dockerfiles with Hadolint
  lint-docker:
    name: Hadolint Dockerfiles
    runs-on: ubuntu-latest
    needs: [lint-java, build-java]
    if: needs.lint-java.result == 'success' && needs.build-java.result == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfile (app)
        run: docker run --rm -i hadolint/hadolint:latest < Dockerfile
      - name: Lint Dockerfile.api (simulator)
        run: docker run --rm -i hadolint/hadolint:latest < Dockerfile.api

  # ──────────────────────────────────────────────────────────────────────────────
  # 4. Lint Shell scripts with ShellCheck
  lint-shell:
    name: ShellCheck Scripts
    runs-on: ubuntu-latest
    needs: [lint-java, lint-docker, build-java]
    if: needs.lint-java.result == 'success' && needs.lint-docker.result == 'success' && needs.build-java.result == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Lint all *.sh
        run: |
          find . -name '*.sh' | xargs shellcheck --severity=error

  build-and-test:
    name: Build & Test App Endpoints
    runs-on: ubuntu-latest
    needs: [lint-java, lint-docker, lint-shell, build-java]
    if: needs.lint-java.result == 'success' && needs.lint-docker.result == 'success' && needs.lint-shell.result == 'success' && needs.build-java.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Build app & simulator images
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.test.yml \
            build minitwit simulator-api

      - name: Start app stack
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.test.yml \
            up -d

      - name: Wait for `/health` to respond
        run: |
          timeout 60 bash -c "until curl -sf http://localhost:5000/health | grep -q '\"status\":\"ok\"'; do
            echo 'waiting…'
            sleep 5
          done"


      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install test deps
        run: pip install requests

      - name: Run API tests
        run: python3 tests/api_tests.py

      - name: Tear down
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.test.yml \
            down --volumes

  deploy:
    name: Deploy to Droplet
    runs-on: ubuntu-latest
    needs: [build-and-test, lint-java, lint-docker, lint-shell, format-java]
    if: needs.build-and-test.result == 'success' && needs.lint-java.result == 'success' && needs.lint-docker.result == 'success' && needs.lint-shell.result == 'success' && needs.format-java.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy everything to one droplet
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_APP_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key:      ${{ secrets.DROPLET_SSH_KEY_PRIVATE }}
          script: |
            set -e

            # 1) App
            cd ~/DevOps-2025                 
            git pull
            docker compose down
            docker compose up -d --build