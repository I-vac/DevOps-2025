name: CI/CD for Java Application

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feat/availability

jobs:
  test-java:
    name: Build & Test Java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven deps
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Build & run Maven tests
        run: mvn clean test -B

  lint:
    name: Validate Docker-Compose configs
    runs-on: ubuntu-latest
    needs: test-java
    steps:
      - uses: actions/checkout@v3

      - name: Validate monitoring/docker-compose.yml
        run: docker compose -f monitoring/docker-compose.yml config -q

      - name: Validate docker-compose.yml (app)
        run: docker compose -f docker-compose.yml config -q

  build-and-test:
    name: Build & Test App Endpoints
    runs-on: ubuntu-latest
    needs: [test-java]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Build & run on throw-away test volume
        run: |
          # build both images
          docker compose \
            -f docker-compose.test.yml \
            build minitwit simulator-api

          # stand them up on a fresh test volume
          docker compose \
            -f docker-compose.test.yml \
            up -d

      - name: Wait for `/health`
        run: |
          timeout 60 bash -c "until curl -sf http://localhost:5000/health | grep -q '\"status\":\"ok\"'; do
            echo 'waiting‚Ä¶'; sleep 5
          done"

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install test deps
        run: pip install requests

      - name: Run API tests
        run: python3 tests/api_tests.py

      - name: Tear down
        run: |
          docker compose \
            -f docker-compose.test.yml \
            down --volumes


  deploy:
    name: Deploy to Droplet App
    runs-on: ubuntu-latest
    needs: [lint]
    # needs: [lint, build-and-test]
    steps:
      - uses: actions/checkout@v3

      - name: Blue-Green Deploy to App Droplet
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_APP_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY_PRIVATE }}
          script: |
            set -e
            cd ~/DevOps-2025
            git pull

            echo "üßπ Cleaning up old legacy containers..."
            docker ps -a --format '{{.Names}}' | grep -E '(^|_)devops-2025-minitwit(-1)?$' | xargs -r docker rm -f || true

            echo "üîç Determining currently active version..."
            CURRENT=$(readlink -f /etc/nginx/minitwit-backend.conf | grep -oE 'blue|green')
            if [ "$CURRENT" = "blue" ]; then
              TARGET="green"
              PORT=5005
            else
              TARGET="blue"
              PORT=5004
            fi

            echo "üöÄ Deploying new version to $TARGET on port $PORT..."
            docker compose -f docker-compose.yml build minitwit-$TARGET
            docker compose -f docker-compose.yml up -d --no-deps --remove-orphans minitwit-$TARGET

            echo "üß™ Waiting for health check on port $PORT..."
            timeout 60 bash -c "until curl -sf http://localhost:$PORT/health | grep -q 'ok'; do echo 'Waiting for app...'; sleep 5; done"

            echo "üîÅ Switching NGINX to new version..."
            sudo ln -sf /etc/nginx/minitwit-backend-$TARGET.conf /etc/nginx/minitwit-backend.conf
            sudo nginx -t && sudo nginx -s reload

            echo "üßº Cleaning up previous version ($CURRENT)..."
            docker stop minitwit-$CURRENT || true
            docker rm minitwit-$CURRENT || true

            echo "‚úÖ Deployment complete."